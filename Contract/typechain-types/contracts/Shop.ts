/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Shop {
  export type ListingStruct = {
    item: AddressLike;
    isNFT: boolean;
    nftId: BigNumberish;
    tokenAmount: BigNumberish;
    chargeToken: AddressLike;
    price: BigNumberish;
    listingId: BigNumberish;
  };

  export type ListingStructOutput = [
    item: string,
    isNFT: boolean,
    nftId: bigint,
    tokenAmount: bigint,
    chargeToken: string,
    price: bigint,
    listingId: bigint
  ] & {
    item: string;
    isNFT: boolean;
    nftId: bigint;
    tokenAmount: bigint;
    chargeToken: string;
    price: bigint;
    listingId: bigint;
  };

  export type ShopInternalStruct = {
    listings: Shop.ListingStruct[];
    userListable: boolean;
    listingNum: BigNumberish;
    owner: AddressLike;
  };

  export type ShopInternalStructOutput = [
    listings: Shop.ListingStructOutput[],
    userListable: boolean,
    listingNum: bigint,
    owner: string
  ] & {
    listings: Shop.ListingStructOutput[];
    userListable: boolean;
    listingNum: bigint;
    owner: string;
  };
}

export interface ShopInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyItem"
      | "initializeShop"
      | "listItem"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "viewShop"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeShop",
    values: [BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [
      BigNumberish,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewShop",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewShop", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Shop extends BaseContract {
  connect(runner?: ContractRunner | null): Shop;
  waitForDeployment(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyItem: TypedContractMethod<
    [game: BigNumberish, listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  initializeShop: TypedContractMethod<
    [game: BigNumberish, userListable: boolean, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  listItem: TypedContractMethod<
    [
      game: BigNumberish,
      item: AddressLike,
      isNFT: boolean,
      nftId: BigNumberish,
      tokenAmount: BigNumberish,
      chargeToken: AddressLike,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  viewShop: TypedContractMethod<
    [game: BigNumberish],
    [Shop.ShopInternalStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyItem"
  ): TypedContractMethod<
    [game: BigNumberish, listingId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeShop"
  ): TypedContractMethod<
    [game: BigNumberish, userListable: boolean, owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listItem"
  ): TypedContractMethod<
    [
      game: BigNumberish,
      item: AddressLike,
      isNFT: boolean,
      nftId: BigNumberish,
      tokenAmount: BigNumberish,
      chargeToken: AddressLike,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewShop"
  ): TypedContractMethod<
    [game: BigNumberish],
    [Shop.ShopInternalStructOutput],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
